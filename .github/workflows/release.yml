name: Code Check & Test

on: [pull_request, push]

permissions:
  contents: write
  pull-requests: write
jobs:
  build:
    name: Build & Test
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config --global user.email "translation-file-watcher@example.com"
          git config --global user.name "Translation File Watcher"

      - name: Determine npm package cache path for os
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            npm_cache_path="C:/npm"
          else
            npm_cache_path="$HOME/.npm"
          fi
          echo "::set-output name=npm_cache_path::$npm_cache_path"
        id: npm-cache-path

      - name: Cache npm packages
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-path.outputs.npm_cache_path }}
          key: ${{ runner.os }}-npm-${{ hashFiles('**/src/*.ts') }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: npm install
        run: npm ci --silent

      - name: Build
        run: npm run test-compile

      - name: Lint
        run: npm run lint

      #Disabled for now because it will fail on ubuntu.
      #- name: Test
      #  run: npm run test

  create:
    name: Create extension
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # - name: Cache npm packages
      #   uses: actions/cache@v4
      #   with:
      #     # todo: check for os: ~/ is not valid for windows
      #     path: |
      #       if [ "${{ runner.os }}" = "Windows" ]; then
      #         'C:/.npm'
      #       else
      #         '~/.npm'
      #       fi
      #     key: ${{ runner.os }}-npm-${{ hashFiles('**/src/*.ts') }}

      - name: Determine npm package cache path for os
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            npm_cache_path="C:/npm"
          else
            npm_cache_path="$HOME/.npm"
          fi
          echo "::set-output name=npm_cache_path::$npm_cache_path"
        id: npm-cache-path

      - name: Cache npm packages
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-path.outputs.npm_cache_path }}
          key: ${{ runner.os }}-npm-${{ hashFiles('**/src/*.ts') }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: npm install
        run: npm ci --silent

      - name: Create extension
        run: npx vsce package -o translation-file-watcher-${{github.sha}}.vsix

      - name: Upload extension
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: translation-file-watcher-
          path: translation-file-watcher-${{github.sha}}.vsix

  release-please:
    name: release-please
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - uses: google-github-actions/release-please-action@v4.1.0
        id: release
        with:
          # this assumes that you have created a personal access token
          # (PAT) and configured it as a GitHub action secret named
          # `MY_RELEASE_PLEASE_TOKEN` (this secret name is not important).
          token: ${{ secrets.RELEASE_PLEASE_KEY }}
          # this is a built-in strategy in release-please, see "Action Inputs"
          # for more options
          release-type: node

          # release-type: node

          # package-name: translation-file-watcher
          # command: github-release

      - uses: actions/checkout@v4
        if: ${{ steps.release.outputs.release_created }}

      - name: Determine npm package cache path for os
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            npm_cache_path="C:/npm"
          else
            npm_cache_path="$HOME/.npm"
          fi
          echo "::set-output name=npm_cache_path::$npm_cache_path"
        id: npm-cache-path

      - name: Cache npm packages
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-path.outputs.npm_cache_path }}
          key: ${{ runner.os }}-npm-${{ hashFiles('**/src/*.ts') }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        if: ${{ steps.release.outputs.release_created }}
        with:
          node-version: '20'
          cache: 'npm'
      - name: npm install
        if: ${{ steps.release.outputs.release_created }}
        run: npm ci --silent
      - name: vsce package
        if: ${{ steps.release.outputs.release_created }}

        #TODO: Change version below
        run: npx vsce package -o translation-file-watcher-${{steps.release.outputs.tag_name}}.vsix
      - name: Upload Release Artifact
        if: ${{ steps.release.outputs.release_created }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          #TODO: Change version below
        run: gh release upload ${{ steps.release.outputs.tag_name }} translation-file-watcher-${{ steps.release.outputs.tag_name }}.vsix
      # - name: vsce publish
      #   if: ${{ steps.release.outputs.release_created }}
      #   env:
      #     VSCE_PAT: ${{ secrets.VSCE_TOKEN }}
      #   run: npx vsce publish
